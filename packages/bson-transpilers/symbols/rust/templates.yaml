#############################################
#             Sample Templates              #
#                                           #
# The expected arguments are commented next #
# to the template itself. Currently all are #
# set to null, but to define a function     #
# replace 'null' with '!!js/function > \n   #
# and a function defined below.             #
#                                           #
# See the other template files for examples #
#                                           #
#               Good to know:               #
# lhs is left-hand-side of the expression   #
# rhs is right-hand-side of the expression  #
# All args are strings unless noted         #
#    - arg? is boolean                      #
#    - arg# is number                       #
#                                           #
#############################################
Templates:
    ########
    # Misc #
    ########

    # Filter out regex flags that have translations or are unsupported.
    RegexFlags: &RegexFlags
        i: 'i'
        m: 'm'
        u: 'u'
        y: ''
        g: ''
    BSONRegexFlags: &BSONRegexFlags
        i: 'i'
        m: 'm'
        x: 'x'
        s: 's'
        l: 'l'
        u: 'u'

    #############################################
    #                  Syntax                   #
    #                                           #
    # Templates for language syntax expressions #
    #                                           #
    #############################################

    DriverTemplate: &DriverTemplate !!js/function >
        (spec) => {
            const comment = `// Requires the MongoDB crate.\n// https://crates.io/crates/mongodb`;
            
            const options = spec.options;
            const filter = spec.filter || {};
            delete spec.options;
            delete spec.filter;

            const connect = `let client = Client::with_uri_str("${options.uri}").await?;`
            const coll = `client.database("${options.database}").collection("${options.collection}")`;

            if ('aggregation' in spec) {
                return `${comment}\n\n${connect}\nlet result = ${coll}.aggregate(${spec.aggregation}, None).await?;`;
            }

            const vars = Object.keys(spec).reduce(
                (result, k) => {
                    if (k === 'sort') {
                        return `${result}\n${k}=list(${spec[k]}.items())`;
                    }
                    return `${result}\n${k}=${spec[k]}`;
                },
                connect
            );

            const args = Object.keys(spec).reduce(
                (result, k) => {
                    const divider = result === '' ? '' : ',\n';
                    return `${result}${divider}  ${
                        k in translateKey ? translateKey[k] : k
                    }=${k}`;
                },
                ''
            );
            const cmd = `result = ${coll}.find(\n${args}\n)`;

            return `${comment}\n\n${vars}\n\n${cmd}`;
        }
    EqualitySyntaxTemplate: &EqualitySyntaxTemplate !!js/function >
        (lhs, op, rhs) => {
            if (op.includes('!') || op.includes('not')) {
                return `${lhs} != ${rhs}`;
            }
            else if (op === '==' || op === '===' || op === 'is') {
                return `${lhs} == ${rhs}`;
            }
            return `${lhs} ${op} ${rhs}`;
        }
    InSyntaxTemplate: &InSyntaxTemplate !!js/function >
        (lhs, op, rhs) => {
            let prefix = '';
            if (op.includes('!') || op.includes('not')) {
                prefix = '!';
            }
            return `${prefix}${rhs}.contains(&${lhs})`
        }
    AndSyntaxTemplate: &AndSyntaxTemplate !!js/function >
        (args) => {
            return args.join(' && ');
        }
    OrSyntaxTemplate: &OrSyntaxTemplate !!js/function >
        (args) => {
            return args.join(' || ');
        }
    NotSyntaxTemplate: &NotSyntaxTemplate !!js/function >
        (arg) => {
            return `!${arg}`;
        }
    UnarySyntaxTemplate: &UnarySyntaxTemplate !!js/function >
        (op, val) => {
            switch(op) {
                case '+':
                    return val;
                case '~':
                    return `!${val}`;
                default:
                    return `${op}${val}`;
            }
            return `${op}${val}`;
        }
    BinarySyntaxTemplate: &BinarySyntaxTemplate !!js/function >
        (args) => {
            return args.reduce((s, op, i, arr) => {
                if (i % 2 === 0) {
                    return s;
                }
                const rhs = arr[i + 1];
                switch(op) {
                    case '//':
                        return `${s} / ${rhs}`
                    case '**':
                        return `${s}.pow(${rhs})`
                    default:
                        return `${s} ${op} ${rhs}`;
                }
            }, args[0]);
        }
    ParensSyntaxTemplate: &ParensSyntaxTemplate null
    EosTemplate: &EosSyntaxTemplate null # No args. End-of-line
    EofTemplate: &EofSyntaxTemplate null # No args. End-of-file
    FloorDivTemplate: &FloorDivSyntaxTemplate null # Args: lhs, rhs
    PowerTemplate: &PowerSyntaxTemplate null # Args: lhs, rhs
    NewTemplate: &NewSyntaxTemplate null # Args: expression, skip?, code# [to check if meant to be skipped]

    #############################################
    #               Literal Types               #
    #                                           #
    # Templates for literal type instance. Most #
    # get passed the literal itself as an arg.  #
    #                                           #
    #############################################
    StringTypeTemplate: &StringTypeTemplate !!js/function >
        (str) => {
          let newStr = str;
          if (
            (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
            (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
            newStr = str.substr(1, str.length - 2);
          }
          return `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
        }
    RegexTypeTemplate: &RegexTypeTemplate !!js/function >
        (pattern, flags) => {
            // Double-quote stringify
            let newPat = pattern;
            if (
                (pattern.charAt(0) === '\'' && pattern.charAt(pattern.length - 1) === '\'') ||
                (pattern.charAt(0) === '"' && pattern.charAt(pattern.length - 1) === '"')) {
                    newPat = pattern.substr(1, pattern.length - 2);
            }
            return `Regex { pattern: "${newPat.replace(/\\([\s\S])|(")/g, '\\$1$2')}", flags: "${flags}" }`;
        }
    BoolTypeTemplate: &BoolTypeTemplate !!js/function >
        (literal) => {
            return literal.toLowerCase();
        }
    IntegerTypeTemplate: &IntegerTypeTemplate null # args: literal, argType (i.e. '_string', '_decimal' etc)
    DecimalTypeTemplate: &DecimalTypeTemplate null # args: literal, argType
    LongBasicTypeTemplate: &LongBasicTypeTemplate null
    HexTypeTemplate: &HexTypeTemplate !!js/function >
        (literal, type) => {
            if (literal.charAt(1) === 'X') {
                return literal.charAt(0) + 'x' + literal.substring(2);
            }
            return literal;
        }
    OctalTypeTemplate: &OctalTypeTemplate !!js/function >
        (literal, type) => {
            switch(literal.charAt(1)) {
                case 'o':
                    return literal;
                case 'O':
                case '0':
                    return literal.charAt(0) + 'o' + literal.substring(2);
                default:
                    return literal.charAt(0) + 'o' + literal.substring(1);
            }
        }
    NumericTypeTemplate: &NumericTypeTemplate null # args: literal, argType
    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >
        (literal, depth) => {
            depth++;
            if (literal === '') {
                return '[]'
            }
            const indent = '\n' + '  '.repeat(depth);
            const closingIndent = '\n' + '  '.repeat(depth - 1);

            return `bson!([${indent}${literal}${closingIndent}])`;
        }
    ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate null # Args: single array element, nestedness, lastElement? (note: not being used atm)
    NullTypeTemplate: &NullTypeTemplate !!js/function >
        () => 'Bson::Null'
    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >
        () => 'Bson::Undefined'
    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >
        (literal) => `doc! {${literal}}`
    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >
        (args, depth) => {
            if (args.length === 0) {
                return '';
            }
            depth++;
            const indent = '\n' + '  '.repeat(depth);
            const closingIndent = '\n' + '  '.repeat(depth - 1);
            const doubleStringify = (str) => {
                let newStr = str;
                if (
                  (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                  (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                    newStr = str.substr(1, str.length - 2);
                }
                return `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
            }

            const pairs = args.map((pair) => {
                return `${indent}${doubleStringify(pair[0])}: ${pair[1]}`;
            }).join(',');

            return `${pairs}${closingIndent}`;

        }

    #############################################
    #               Symbols                     #
    #                                           #
    # Templates for symbols, can be either      #
    # functions or variables.                   #
    #                                           #
    # The *SymbolTemplates return names and     #
    # usually don't take any arguments. The     #
    # *SymbolArgsTemplates are invoked for func #
    # calls. The first argument is always the   #
    # lhs, i.e. the symbol returned from the    #
    # corresponding SymbolTemplate. The rest of #
    # the arguments are the processed arguments #
    # passed to the original function.          #
    #                                           #
    #############################################
    CodeSymbolTemplate: &CodeSymbolTemplate !!js/function >
        () => 'Bson::JavaScriptCode'
    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >
        (lhs, code, scope) => {
            // Double quote stringify
            let newStr = code === undefined ? '' : code;
            const str = newStr;
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                newStr = str.substr(1, str.length - 2);
            }
            code = `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
            if (scope === undefined) {
                return `(${code})`;
            } else {
                return `WithScope(JavaScriptCodeWithScope { code: ${code}, scope: ${scope} })`;
            }
        }
    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate !!js/function >
        () => 'ObjectId'
    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >
        (lhs, arg) => {
            if (arg === undefined || arg === '') {
                return '::new()';
            }
            // Double quote stringify
            let newArg = arg;
            if (
                (arg.charAt(0) === '\'' && arg.charAt(arg.length - 1) === '\'') ||
                (arg.charAt(0) === '"' && arg.charAt(arg.length - 1) === '"')) {
                newArg = arg.substr(1, arg.length - 2);
            }
            newArg = `"${newArg.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
            return `::parse_str(${newArg})?`;
        }
    BinarySymbolTemplate: &BinarySymbolTemplate null
    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate null
    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate null
    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate null
    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate null
    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate null
    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate null
    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template null
    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate null
    DBRefSymbolTemplate: &DBRefSymbolTemplate null # No args
    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null # Args: lhs, coll, id, db
    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >
        () => ''
    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate !!js/function >
        (lhs, arg, type) => {
            arg = arg === undefined ? 0 : arg;
            if (type === '_decimal' || type === '_double') {
                return arg;
            }
            if (type === '_integer' || type === '_long') {
                return `${arg}.0`;
            }
            if (type === '_string') {
                return `${arg}.parse::<f32>()?`;
            }
            return `f32::try_from(${arg})?`;
        }
    Int32SymbolTemplate: &Int32SymbolTemplate !!js/function >
        () => ''
    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate !!js/function >
        (lhs, arg, type) => {
            arg = arg === undefined ? 0 : arg;
            if (type === '_integer' || type === '_long' || type === '_hex' || type === '_octal') {
                return arg;
            }
            if (type === '_string') {
                return `${arg}.parse::<i32>()?`;
            }
            return `i32::try_from(${arg})?`;
        }
    LongSymbolTemplate: &LongSymbolTemplate !!js/function >
        () => ''
    LongSymbolArgsTemplate: &LongSymbolArgsTemplate !!js/function >
        (lhs, arg, type) => {
            arg = arg === undefined ? 0 : arg;
            if (type === '_integer' || type === '_long' || type === '_hex' || type === '_octal') {
                return `${arg}i64`;
            }
            if (type === '_string') {
                return `${arg}.parse::<i64>()?`;
            }
            return `i64::try_from(${arg})?`;
        }
    RegExpSymbolTemplate: &RegExpSymbolTemplate !!js/function >
        () => 'Regex'
    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null # Args: lhs, pattern, flags
    SymbolSymbolTemplate: &SymbolSymbolTemplate null # No args
    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate null # Args: lhs, arg
    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate !!js/function >
        () => 'Regex'
    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate !!js/function >
        (lhs, pattern, flags) => {
            if (flags === null || flags === undefined) {
                flags = '';
            }
            // Double-quote stringify
            let dq = (str) => {
                let newStr = str;
                if (
                    (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                    (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                        newStr = str.substr(1, str.length - 2);
                }
                return newStr.replace(/\\([\s\S])|(")/g, '\\$1$2');
            };
            return ` { pattern: "${dq(pattern)}", flags: "${dq(flags)}" }`;
        }
    Decimal128SymbolTemplate: &Decimal128SymbolTemplate null # No args
    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate null # Args: lhs, arg
    MinKeySymbolTemplate: &MinKeySymbolTemplate !!js/function >
        () => 'Bson::MinKey'
    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate !!js/function >
        () => ''
    MaxKeySymbolTemplate: &MaxKeySymbolTemplate !!js/function >
        () => 'Bson::MaxKey'
    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate !!js/function >
        () => ''
    TimestampSymbolTemplate: &TimestampSymbolTemplate !!js/function >
        () => 'Timestamp'
    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate !!js/function >
        (lhs, low, high) => {
            if (low === undefined) {
                low = 0;
                high = 0;
            }
            return ` { time: ${low}, increment: ${high} }`
        }
    # non bson-specific
    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >
        () => ''
    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate !!js/function >
        (lhs, arg, type) => {
            arg = arg === undefined ? 0 : arg;

            switch(type) {
                case '_string':
                    if (arg.indexOf('.') !== -1) {
                        return `${arg}.parse::<f32>()?`;
                    }
                    return `${arg}.parse::<i32>()?`;
                case '_integer':
                case '_long':
                case '_decimal':
                    return `${arg}`;
                default:
                    return `f32::try_from(${arg})?`;
            }
        }
    DateSymbolTemplate: &DateSymbolTemplate !!js/function >
        () => 'Utc'
    DateSymbolArgsTemplate: &DateSymbolArgsTemplate !!js/function >
        (lhs, date, isString) => {
            let toStr = isString ? '.to_rfc2822()' : '';
            if (date === null) {
                return `${lhs}::now()${toStr}`;
            }
            let ymd = `.ymd(${date.getUTCFullYear()}, ${date.getUTCMonth()+1}, ${date.getUTCDate()})`;
            let hms = `.and_hms(${date.getUTCHours()}, ${date.getUTCMinutes()}, ${date.getUTCSeconds()})`;
            return `${lhs}${ymd}${hms}${toStr}`;
        }

    #############################################
    #         Object Attributes/Methods         #
    #                                           #
    # These're variables or functions called on #
    # instantiated objects. For example,        #
    # ObjectId().isValid() or Timestamp().t     #
    #                                           #
    # They follow the same pattern with the
    # *Template/*ArgsTemplates: usually no args #
    # to the Template and lhs plus any original #
    # arguments to the ArgsTemplate.            #
    #                                           #
    #############################################
    CodeCodeTemplate: &CodeCodeTemplate null
    CodeCodeArgsTemplate: &CodeCodeArgsTemplate null
    CodeScopeTemplate: &CodeScopeTemplate null
    CodeScopeArgsTemplate: &CodeScopeArgsTemplate null
    ObjectIdToStringTemplate: &ObjectIdToStringTemplate null
    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate null
    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate null
    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate null
    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate null
    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate null
    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate null
    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null
    BinaryValueTemplate: &BinaryValueTemplate null
    BinaryValueArgsTemplate: &BinaryValueArgsTemplate null
    BinaryLengthTemplate: &BinaryLengthTemplate null
    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate null
    BinaryToStringTemplate: &BinaryToStringTemplate null
    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null
    BinarySubtypeTemplate: &BinarySubtypeTemplate null
    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate null
    DBRefGetDBTemplate: &DBRefGetDBTemplate null
    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate null
    DBRefGetIdTemplate: &DBRefGetIdTemplate null
    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate null
    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate null
    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate null
    DBRefToStringTemplate: &DBRefToStringTemplate null
    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null
    DoubleValueOfTemplate: &DoubleValueOfTemplate null
    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate null
    Int32ValueOfTemplate: &Int32ValueOfTemplate null
    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate null
    Int32ToStringTemplate: &Int32ToStringTemplate null
    Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate null
    LongEqualsTemplate: &LongEqualsTemplate null
    LongEqualsArgsTemplate: &LongEqualsArgsTemplate null
    LongToStringTemplate: &LongToStringTemplate null
    LongToStringArgsTemplate: &LongToStringArgsTemplate null
    LongToIntTemplate: &LongToIntTemplate null
    LongToIntArgsTemplate: &LongToIntArgsTemplate null
    LongValueOfTemplate: &LongValueOfTemplate null
    LongValueOfArgsTemplate: &LongValueOfArgsTemplate null
    LongToNumberTemplate: &LongToNumberTemplate null
    LongToNumberArgsTemplate: &LongToNumberArgsTemplate null
    LongAddTemplate: &LongAddTemplate null
    LongAddArgsTemplate: &LongAddArgsTemplate null
    LongSubtractTemplate: &LongSubtractTemplate null
    LongSubtractArgsTemplate: &LongSubtractArgsTemplate null
    LongMultiplyTemplate: &LongMultiplyTemplate null
    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate null
    LongDivTemplate: &LongDivTemplate null
    LongDivArgsTemplate: &LongDivArgsTemplate null
    LongModuloTemplate: &LongModuloTemplate null
    LongModuloArgsTemplate: &LongModuloArgsTemplate null
    LongAndTemplate: &LongAndTemplate null
    LongAndArgsTemplate: &LongAndArgsTemplate null
    LongOrTemplate: &LongOrTemplate null
    LongOrArgsTemplate: &LongOrArgsTemplate null
    LongXorTemplate: &LongXorTemplate null
    LongXorArgsTemplate: &LongXorArgsTemplate null
    LongShiftLeftTemplate: &LongShiftLeftTemplate null
    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate null
    LongShiftRightTemplate: &LongShiftRightTemplate null
    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate null
    LongCompareTemplate: &LongCompareTemplate null
    LongCompareArgsTemplate: &LongCompareArgsTemplate null
    LongIsOddTemplate: &LongIsOddTemplate null
    LongIsOddArgsTemplate: &LongIsOddArgsTemplate null
    LongIsZeroTemplate: &LongIsZeroTemplate null
    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate null
    LongIsNegativeTemplate: &LongIsNegativeTemplate null
    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate null
    LongNegateTemplate: &LongNegateTemplate null
    LongNegateArgsTemplate: &LongNegateArgsTemplate null
    LongNotTemplate: &LongNotTemplate null
    LongNotArgsTemplate: &LongNotArgsTemplate null
    LongNotEqualsTemplate: &LongNotEqualsTemplate null
    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate null
    LongGreaterThanTemplate: &LongGreaterThanTemplate null
    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate null
    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate null
    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate null
    LongLessThanTemplate: &LongLessThanTemplate null
    LongLessThanArgsTemplate: &LongLessThanArgsTemplate null
    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate null
    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate null
    LongFloatApproxTemplate: &LongFloatApproxTemplate null
    LongTopTemplate: &LongTopTemplate null
    LongBottomTemplate: &LongBottomTemplate null
    TimestampToStringTemplate: &TimestampToStringTemplate null
    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate null
    TimestampEqualsTemplate: &TimestampEqualsTemplate null
    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate null
    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate null
    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate null
    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate null
    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate null
    TimestampTTemplate: &TimestampTTemplate null
    TimestampITemplate: &TimestampITemplate null
    TimestampAsDateTemplate: &TimestampAsDateTemplate null
    TimestampAsDateArgsTemplate: &TimestampAsDateArgsTemplate null
    TimestampCompareTemplate: &TimestampCompareTemplate null
    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate null
    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate null
    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate null
    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate null
    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate null
    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate null
    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate null
    TimestampLessThanTemplate: &TimestampLessThanTemplate null
    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate null
    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate null
    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate null
    SymbolValueOfTemplate: &SymbolValueOfTemplate null
    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate null
    SymbolInspectTemplate: &SymbolInspectTemplate null
    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate null
    SymbolToStringTemplate: &SymbolToStringTemplate null
    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate null
    Decimal128ToStringTemplate: &Decimal128ToStringTemplate null
    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null
    # non bson-specific
    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >
        () => 'Utc::now()'
    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate !!js/function >
        () => ''

    #############################################
    #         Symbol Attributes/Methods         #
    #                                           #
    # These're variables or functions called on #
    # symbols. Also called bson-utils.          #
    #                                           #
    # They are basically the same thing as      #
    # object attributes/methods, but need to be #
    # distinguished since they are separate     #
    # namespaces that happen to have the same   #
    # name which is v confusing.                #
    #                                           #
    # For example, ObjectId().toString() is an  #
    # object method, while ObjectId.fromString  #
    # is a symbol attribute. These are two      #
    # separate ObjectId related namespaces that #
    # don't overlap.                            #
    #                                           #
    #############################################
    LongSymbolMaxTemplate: &LongSymbolMaxTemplate null
    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null
    LongSymbolMinTemplate: &LongSymbolMinTemplate null
    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null
    LongSymbolZeroTemplate: &LongSymbolZeroTemplate null
    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null
    LongSymbolOneTemplate: &LongSymbolOneTemplate null
    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null
    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate null
    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null
    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate null
    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null
    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate null
    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null
    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate null
    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null
    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate null
    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate null
    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate null
    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate null
    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate null
    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate null
    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate null
    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate null
    # non bson-specific would go here, but there aren't any atm.

    #############################################
    #                 Imports                   #
    #                                           #
    # Each type has a 'code' that is consistent #
    # between languages. The import templates   #
    # for each code generate the required       #
    # statement for each type. No args.         #
    #                                           #
    # The ImportTemplate collects everything    #
    # into one statement.                       #
    #                                           #
    #############################################
    ImportTemplate: &ImportTemplate null
    DriverImportTemplate: &DriverImportTemplate null
    0ImportTemplate: &0ImportTemplate null
    1ImportTemplate: &1ImportTemplate null
    2ImportTemplate: &2ImportTemplate null
    3ImportTemplate: &3ImportTemplate null
    4ImportTemplate: &4ImportTemplate null
    5ImportTemplate: &5ImportTemplate null
    6ImportTemplate: &6ImportTemplate null
    7ImportTemplate: &7ImportTemplate null
    8ImportTemplate: &8ImportTemplate null
    9ImportTemplate: &9ImportTemplate null
    10ImportTemplate: &10ImportTemplate null
    11ImportTemplate: &11ImportTemplate null
    12ImportTemplate: &12ImportTemplate null
    100ImportTemplate: &100ImportTemplate null
    101ImportTemplate: &101ImportTemplate null
    102ImportTemplate: &102ImportTemplate null
    103ImportTemplate: &103ImportTemplate null
    104ImportTemplate: &104ImportTemplate null
    105ImportTemplate: &105ImportTemplate null
    106ImportTemplate: &106ImportTemplate null
    107ImportTemplate: &107ImportTemplate null
    108ImportTemplate: &108ImportTemplate null
    109ImportTemplate: &109ImportTemplate null
    110ImportTemplate: &110ImportTemplate null
    111ImportTemplate: &111ImportTemplate null
    112ImportTemplate: &112ImportTemplate null
    113ImportTemplate: &113ImportTemplate null
    114ImportTemplate: &114ImportTemplate null
    200ImportTemplate: &200ImportTemplate null
    201ImportTemplate: &201ImportTemplate null
    300ImportTemplate: &300ImportTemplate null
    301ImportTemplate: &301ImportTemplate null
    302ImportTemplate: &302ImportTemplate null
    303ImportTemplate: &303ImportTemplate null
    304ImportTemplate: &304ImportTemplate null
    305ImportTemplate: &305ImportTemplate null
    306ImportTemplate: &306ImportTemplate null
